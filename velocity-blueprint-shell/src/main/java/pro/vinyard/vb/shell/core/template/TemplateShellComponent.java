package pro.vinyard.vb.shell.core.template;

import org.springframework.shell.component.support.SelectorItem;
import org.springframework.shell.standard.ShellComponent;
import org.springframework.shell.standard.ShellMethod;
import pro.vinyard.vb.engine.core.template.TemplateManager;
import pro.vinyard.vb.shell.shell.CustomAbstractShellComponent;

import java.io.File;
import java.io.PrintWriter;
import java.util.List;

/**
 * Shell component to manage templates
 * <p>It allows to create, delete and list templates</p>
 */
@ShellComponent
public class TemplateShellComponent extends CustomAbstractShellComponent {

    private final TemplateManager templateManager;

    public TemplateShellComponent(TemplateManager templateManager) {
        this.templateManager = templateManager;
    }

    /**
     * Action on template
     * <p>Ask the user to select an action on the template</p>
     * <ul>
     *     <li>Create template</li>
     *     <li>Delete template</li>
     *     <li>List templates</li>
     * </ul>
     *
     * @throws IllegalArgumentException if the template name is null
     */
    @ShellMethod(key = "template", value = "Action on template", group = "Template")
    public void template() {
        List<SelectorItem<Runnable>> items = List.of(
                SelectorItem.of("Create template", this::createTemplate),
                SelectorItem.of("Delete template", this::deleteTemplates),
                SelectorItem.of("List templates", this::listTemplates)
        );

        singleSelect(items, "Select action").run();
    }

    /**
     * Create a template
     * <p>Ask the user for a template name and create the template</p>
     * <p>The template is generated by :</p>
     * <ul>
     *   <li>Creating a .vm file with the template name in the template directory</li>
     * </ul>
     *
     * @throws IllegalArgumentException if the template name is null
     */
    public void createTemplate() {
        String name = stringInput("Enter template name", null, false);

        if (name == null) {
            throw new IllegalArgumentException("Template name cannot be null");
        }

        this.templateManager.createTemplate(name);
    }

    /**
     * Delete templates
     * <p>Ask the user to select templates to delete and delete them.</p>
     * <p>Templates are deleted by deleting all selected templates files.</p>
     *
     * @throws IllegalArgumentException if no template is selected
     */
    public void deleteTemplates() {
        List<SelectorItem<String>> items = this.templateManager.findAllTemplates().stream().map(File::getName).map(m -> SelectorItem.of(m, m)).toList();

        List<String> templates = multiSelector(items, "Select templates to delete");

        if (templates == null || templates.isEmpty()) {
            throw new IllegalArgumentException("No template selected.");
        }

        for (String template : templates) {
            this.templateManager.deleteTemplate(template);
        }
    }

    /**
     * List templates
     * <p>List all templates</p>
     * <p>Templates are listed by :</p>
     * <ul>
     *     <li>Listing all templates files in the template directory</li>
     * </ul>
     */
    public void listTemplates() {
        PrintWriter writer = getTerminal().writer();
        String msg = this.templateManager.listTemplates();
        writer.print(msg);
        writer.flush();
    }
}
